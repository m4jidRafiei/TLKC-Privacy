from pm4py.objects.log.importer.xes import factory as xes_import_factory
from pm4py.algo.discovery.inductive import factory as inductive_miner
from pm4py.evaluation.replay_fitness import factory as replay_factory
from pm4py.evaluation.precision import factory as precision_factory
from ELRepresentation import ELRepresentation
from MFS import MFS
from MVS import MVS
import time


def runfunction(L,K,C,K2,sensitive, cont, spectime, contbound):
    f = open("r" + str(L) + "_" + str(K) +  "_" + str(C) + "_" + str(K2) + "_" + str(spectime) + "_"+ str(contbound["Age"]) + ".txt", "w")
    start = time.time()


    #sensitive = ['Age', 'Diagnose']
    #spectime = "seconds"
    #cont = ['Age']
    #L = 2
    #K = 50
    #C = 0.5
    #contbound = {"Age":1}

      #All the event log manipulations (changes in representation) are supposed to be done in this class
    mfs = MFS()  # All the methods assiciated with MFS are supposed to be developed in this class


    #logsimple_onlyActivity, T_onlyActivity, sensitives_count = repres.simplify_LKC_without_time(sensitive)

    try:
        f.write("\n count \n")
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        repres = ELRepresentation(log)
        repres2 = ELRepresentation(log2)
        logsimple_count, T_count, sensitives_count = repres.simplify_LKC_without_time_count(sensitive)
        frequent_count = mfs.frequent_seq_activity(T_count, K2*len(T_count))
        print("frequent count","\n", len(frequent_count))
        mvs = MVS(T_count, logsimple_count, sensitive, cont, sensitives_count, True)
        violating_count = mvs.mvs(L,K,C)
        print("violating count:","\n", len(violating_count))
        mvs = MVS(T_count, logsimple_count, sensitive, cont, sensitives_count, True)
        violating_count_dev = mvs.mvs(L,K,C,type="dev",contbound=contbound)
        print("violating count dev:", "\n", len(violating_count_dev))
        l1 = len(frequent_count)
        l2 = len(violating_count)
        l3 = len(violating_count_dev)
        f.write("frequent: " + str(l1) + " violating: " + str(l2)
                + " violating dev: " + str(l3) + "\n")
        sup_count = repres.suppression(violating_count, frequent_count)
        f.write("sup \n")
        sup_count_dev = repres2.suppression(violating_count_dev, frequent_count)
        f.write("sup \n")
        T_count = repres.suppressT(logsimple_count, sup_count)
        f.write("supT \n")
        T_count_dev = repres2.suppressT(logsimple_count, sup_count_dev)
        f.write("supT \n")
        log_count, d_count, d_l_count = repres.createEventLog(T_count, spectime)
        log_count_dev, d_count_dev, d_l_count_dev = repres2.createEventLog(T_count_dev, spectime)
        f.write("\n deleted\n")
        f.write("elements in trace " + str(d_count) + " traces " + str(d_l_count) + "\n")
        f.write("elements in trace dev" + str(d_count_dev) + " traces " + str(d_l_count_dev) + "\n")
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        net_count, initial_marking_count, final_marking_count = inductive_miner.apply(log_count)
        fitness_count = replay_factory.apply(log, net_count, initial_marking_count, final_marking_count)
        precision_count = precision_factory.apply(log, net_count, initial_marking_count, final_marking_count)
        print("count", "\n","fitness", fitness_count, "\n","precision", precision_count)
        net_count_dev, initial_marking_count_dev, final_marking_count_dev = inductive_miner.apply(log_count_dev)
        fitness_count_dev = replay_factory.apply(log, net_count_dev, initial_marking_count_dev
                                                 , final_marking_count_dev)
        precision_count_dev = precision_factory.apply(log, net_count_dev, initial_marking_count_dev
                                                      , final_marking_count_dev)
        print("count and dev", "\n","fitness", fitness_count_dev, "\n","precision", precision_count_dev)
        f.write("fitness count")
        f.write(str(fitness_count))
        f.write("\n precision count")
        f.write(str(precision_count))
        f.write("fitness count and dev")
        f.write(str(fitness_count_dev))
        f.write("\n precision count and dev")
        f.write(str(precision_count_dev))
        f.write("\n")
        finish1 = time.time()
        t = finish1-start
        f.write("process time "+str(t))
        f.write("\n")
    except Exception as e:
        f.write("\n" + str(type(e)) + "\n")
        finish1 = time.time()
        t = finish1 - start
        f.write("process time " + str(t))
        f.write("\n")
        print(e)

    try:
        f.write("\n set \n")
        finish1 = time.time()
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        repres = ELRepresentation(log)
        repres2 = ELRepresentation(log2)
        logsimple_set, T_set, sensitives_set = repres.simplify_LKC_without_time_set(sensitive)
        frequent_items_set = mfs.frequent_set_miner(T_set, K2*len(T_set))
        print("frequent set", "\n", len(frequent_items_set))
        mvs = MVS(T_set, logsimple_set, sensitive, cont, sensitives_set, count=False, set=True)
        violating_set = mvs.mvs(L,K,C)
        print("violating set:","\n", len(violating_set))
        mvs = MVS(T_set, logsimple_set, sensitive, cont, sensitives_set, count=False, set=True)
        violating_set_dev = mvs.mvs(L,K,C,type="dev",contbound=contbound)
        print("violating set dev:", "\n", len(violating_set_dev))
        l1 = len(frequent_items_set)
        l2 = len(violating_set)
        l3 = len(violating_set_dev)
        f.write("frequent: " + str(l1) + " violating: " + str(l2)
                + " violating dev: " + str(l3) + "\n")
        sup_set = repres.suppression(violating_set, frequent_items_set)
        f.write("sup \n")
        sup_set_dev = repres2.suppression(violating_set_dev, frequent_items_set)
        f.write("sup \n")
        T_set = repres.suppressT(logsimple_set, sup_set)
        f.write("supT \n")
        T_set_dev = repres2.suppressT(logsimple_set, sup_set_dev)
        f.write("supT \n")
        log_set, d_set, d_l_set = repres.createEventLog(T_set, spectime)
        log_set_dev, d_set_dev, d_l_set_dev = repres2.createEventLog(T_set_dev, spectime)
        f.write("elements in trace " + str(d_set) + " traces " + str(d_l_set) + "\n")
        f.write("elements in trace dev " + str(d_set_dev) + " traces " + str(d_l_set_dev) + "\n")
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        net_set, initial_marking_set, final_marking_set = inductive_miner.apply(log_set)
        fitness_set = replay_factory.apply(log, net_set, initial_marking_set, final_marking_set)
        precision_set = precision_factory.apply(log, net_set, initial_marking_set, final_marking_set)
        print("set", "\n","fitness", "\n","precision", precision_set)
        net_set_dev, initial_marking_set_dev, final_marking_set_dev = inductive_miner.apply(log_set_dev)
        fitness_set_dev = replay_factory.apply(log, net_set_dev, initial_marking_set_dev, final_marking_set_dev)
        precision_set_dev = precision_factory.apply(log, net_set_dev, initial_marking_set_dev, final_marking_set_dev)
        print("set and dev", "\n","fitness", fitness_set_dev, "\n","precision", precision_set_dev)
        f.write("fitness set")
        f.write(str(fitness_set))
        f.write("\n precision set")
        f.write(str(precision_set))
        f.write("\n")
        f.write("fitness set and dev")
        f.write(str(fitness_set_dev))
        f.write("\n precision set and dev")
        f.write(str(precision_set_dev))
        f.write("\n")

        finish2 = time.time()
        t = finish2 - finish1
        f.write("process time "+str(t))
        f.write("\n")
    except Exception as e:
        f.write("\n" + str(repr(e))+ "\n")
        print(e)
        finish2 = time.time()
        t = finish2 - finish1
        f.write("process time " + str(t))
        f.write("\n")

    try:
        f.write("\n set and count \n")
        finish2 = time.time()
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        repres = ELRepresentation(log)
        repres2 = ELRepresentation(log2)
        logsimple_set_count, T_set_count, sensitives_set_count = repres.simplify_LKC_without_time_count_set(sensitive)
        frequent_items_count_set = mfs.frequent_set_miner(T_set_count, K2*len(T_set_count))
        print("frequent set and count", "\n", len(frequent_items_count_set))
        mvs = MVS(T_set_count, logsimple_set_count, sensitive, cont, sensitives_set_count, True,True)
        violating_count_set = mvs.mvs(L,K,C)
        print("violating count and set:", "\n", len(violating_count_set))
        mvs = MVS(T_set_count, logsimple_set_count, sensitive, cont, sensitives_set_count, True,True)
        violating_count_set_dev = mvs.mvs(L,K,C,type="dev",contbound=contbound)
        print("violating count and set dev:", "\n", len(violating_count_set_dev))
        l1 = len(frequent_items_count_set)
        l2 = len(violating_count_set)
        l3 = len(violating_count_set_dev)
        f.write("frequent: " + str(l1) + " violating: " + str(l2)
                + " violating dev: " + str(l3) + "\n")
        sup_set_count = repres.suppression(violating_count_set, frequent_items_count_set)
        f.write("sup \n")
        sup_set_count_dev = repres2.suppression(violating_count_set_dev, frequent_items_count_set)
        f.write("sup \n")
        T_set_count = repres.suppressT(logsimple_set_count, sup_set_count)
        f.write("supT \n")
        T_set_count_dev = repres2.suppressT(logsimple_set_count, sup_set_count_dev)
        f.write("supT \n")
        log_set_count, d_set_count, d_l_set_count = repres.createEventLog(T_set_count, spectime)
        log_set_count_dev, d_set_count_dev, d_l_set_count_dev = repres2.createEventLog(T_set_count_dev, spectime)
        f.write("elements in trace " + str(d_set_count) + " traces " + str(d_l_set_count) + "\n")
        f.write("elements in trace dev" + str(d_set_count_dev) + " traces " + str(d_l_set_count_dev) + "\n")
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        net_set_count, initial_marking_set_count, final_marking_set_count = inductive_miner.apply(log_set_count)
        fitness_set_count = replay_factory.apply(log, net_set_count, initial_marking_set_count
                                                 , final_marking_set_count)
        precision_set_count = precision_factory.apply(log, net_set_count, initial_marking_set_count
                                                      , final_marking_set_count)
        print("set and count", "\n","fitness", fitness_set_count, "\n","precision", precision_set_count)
        net_set_count_dev, initial_marking_set_count_dev, final_marking_set_count_dev = inductive_miner.apply(log_set_count_dev)
        fitness_set_count_dev = replay_factory.apply(log, net_set_count_dev, initial_marking_set_count_dev
                                                     , final_marking_set_count_dev)
        precision_set_count_dev = precision_factory.apply(log, net_set_count_dev
                                                          , initial_marking_set_count_dev, final_marking_set_count_dev)
        print("set and count dev", "\n","fitness", fitness_set_count_dev, "\n","precision", precision_set_count_dev)


        f.write("fitness set count")
        f.write(str(fitness_set_count))
        f.write("\n precision set count")
        f.write(str(precision_set_count))
        f.write("\n")
        f.write("fitness set count dev")
        f.write(str(fitness_set_count_dev))
        f.write("\n precision set count dev")
        f.write(str(precision_set_count_dev))
        f.write("\n")

        finish3 = time.time()
        t = finish3 - finish2
        f.write("process time "+str(t))
        f.write("\n")
    except Exception as e:
        f.write("\n" + str(repr(e))+ "\n")
        print(e)
        finish3 = time.time()
        t = finish3 - finish2
        f.write("process time " + str(t))
        f.write("\n")

    try:
        f.write("\n time \n")
        finish3 = time.time()
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        repres = ELRepresentation(log)
        repres2 = ELRepresentation(log2)
        logsimple, T, sensitives = repres.simplify_LKC_with_time(sensitive,spectime)
        frequent_time = mfs.frequent_seq_activityTime(T, K2*len(T))
        print("frequent time", "\n", len(frequent_time))
        mvs = MVS(T, logsimple, sensitive, cont, sensitives)
        violating = mvs.mvs(L,5,C)
        print("violating:", "\n", len(violating))
        mvs = MVS(T, logsimple, sensitive, cont, sensitives)
        violating_dev = mvs.mvs(L,5,C,type="dev",contbound=contbound)
        print("violating dev:", "\n", len(violating_dev))
        l1 = len(frequent_time)
        l2 = len(violating)
        l3 = len(violating_dev)
        f.write("frequent: " + str(l1) + " violating: " + str(l2)
                + " violating dev: " + str(l3) + "\n")
        sup_time = repres.suppression(violating, frequent_time)
        f.write("sup \n")
        sup_time_dev = repres2.suppression(violating_dev, frequent_time)
        f.write("sup \n")
        T_time = repres.suppressT(logsimple, sup_time)
        f.write("supT \n")
        T_time_dev = repres2.suppressT(logsimple, sup_time_dev)
        f.write("supT \n")
        log_time, d_time, d_l_time = repres.createEventLog(T_time, spectime)
        f.write("elements in trace " + str(d_time) + " traces " + str(d_l_time) + "\n")
        log_time_dev, d_time_dev, d_l_time_dev = repres2.createEventLog(T_time_dev, spectime)
        f.write("elements in trace dev " + str(d_time_dev) + " traces " + str(d_l_time_dev) + "\n")
        log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
        net_time, initial_marking_time, final_marking_time = inductive_miner.apply(log_time)
        fitness_time = replay_factory.apply(log, net_time, initial_marking_time, final_marking_time)
        precision_time = precision_factory.apply(log, net_time, initial_marking_time, final_marking_time)
        print("time", "\n","fitness", fitness_time, "\n","precision", precision_time)
        net_time_dev, initial_marking_time_dev, final_marking_time_dev = inductive_miner.apply(log_time_dev)
        fitness_time_dev = replay_factory.apply(log, net_time_dev, initial_marking_time_dev, final_marking_time_dev)
        precision_time_dev = precision_factory.apply(log, net_time_dev, initial_marking_time_dev
                                                     , final_marking_time_dev)
        print("time dev", "\n","fitness", fitness_time_dev, "\n","precision", precision_time_dev)

        f.write("fitness time")
        f.write(str(fitness_time))
        f.write("\n precision time")
        f.write(str(precision_time))
        f.write("\n")
        f.write("time dev \n")
        f.write("fitness")
        f.write(str(fitness_time_dev))
        f.write("\n precision")
        f.write(str(precision_time_dev))
        f.write("\n")
        finish4 = time.time()
        t = finish4 - finish3
        f.write("process time "+str(t))
    except Exception as e:
        f.write("\n" + str(repr(e)) + "\n")
        print(e)
        finish4 = time.time()
        t = finish4 - finish3
        f.write("process time " + str(t))
    f.close()

