from pm4py.objects.log.importer.xes import factory as xes_import_factory
from pm4py.algo.discovery.inductive import factory as inductive_miner
from pm4py.evaluation.replay_fitness import factory as replay_factory
from pm4py.evaluation.precision import factory as precision_factory
from ELRepresentation import ELRepresentation
from MFS import MFS
from MVS import MVS
import time
#start = time. time()
f = open("resultscount.txt", "w")
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")#, parameters={"max_no_traces_to_import": 1000})
print(log)
net, initial_marking, final_marking = inductive_miner.apply(log)
fitness = replay_factory.apply(log, net, initial_marking, final_marking)
precision = precision_factory.apply(log, net, initial_marking, final_marking)
f.write("original\n")
f.write("fitness")
f.write(str(fitness))
f.write("\n precision")
f.write(str(precision))

sensitive = ['Age', 'Diagnose']
spectime = "seconds"
cont = ['Age']
L = 2
K = 50
C = 0.5
contbound = {"Age":1}

  #All the event log manipulations (changes in representation) are supposed to be done in this class
mfs = MFS()  # All the methods assiciated with MFS are supposed to be developed in this class


#logsimple_onlyActivity, T_onlyActivity, sensitives_count = repres.simplify_LKC_without_time(sensitive)


log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
repres = ELRepresentation(log)
repres2 = ELRepresentation(log2)
logsimple_count, T_count, sensitives_count = repres.simplify_LKC_without_time_count(sensitive)
frequent_count = mfs.frequent_seq_activity(T_count, 300)
print("frequent count", frequent_count, "\n", len(frequent_count))
mvs = MVS(T_count, logsimple_count, sensitive, cont, sensitives_count, True)
violating_count = mvs.mvs(L,K,C)
print("violating count:", violating_count, "\n", len(violating_count))
mvs = MVS(T_count, logsimple_count, sensitive, cont, sensitives_count, True)
violating_count_dev = mvs.mvs(L,K,C,type="dev",contbound=contbound)
print("violating count dev:", violating_count_dev, "\n", len(violating_count_dev))
sup_count = repres.suppression(violating_count, frequent_count)
sup_count_dev = repres.suppression(violating_count_dev, frequent_count)
T_count = repres.suppressT(logsimple_count, sup_count)
T_count_dev = repres2.suppressT(logsimple_count, sup_count_dev)
log_count = repres.createEventLog(T_count, spectime)
print("count", log_count)
log_count_dev = repres2.createEventLog(T_count_dev, spectime)
print("count dev", log_count_dev)
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
net_count, initial_marking_count, final_marking_count = inductive_miner.apply(log_count)
fitness_count = replay_factory.apply(log, net_count, initial_marking_count, final_marking_count)
precision_count = precision_factory.apply(log, net_count, initial_marking_count, final_marking_count)
print("count", "\n","fitness", fitness_count, "\n","precision", precision_count)
net_count_dev, initial_marking_count_dev, final_marking_count_dev = inductive_miner.apply(log_count_dev)
fitness_count_dev = replay_factory.apply(log, net_count_dev, initial_marking_count_dev
                                         , final_marking_count_dev)
precision_count_dev = precision_factory.apply(log, net_count_dev, initial_marking_count_dev
                                              , final_marking_count_dev)
print("count and dev", "\n","fitness", fitness_count_dev, "\n","precision", precision_count_dev)
f.write("\n count \n")
f.write("fitness")
f.write(str(fitness_count))
f.write("\n precision")
f.write(str(precision_count))
f.write("\n")
f.write("count and dev \n")
f.write("fitness")
f.write(str(fitness_count_dev))
f.write("\n precision")
f.write(str(precision_count_dev))
f.write("\n")
f.close()


f = open("resultsset.txt", "w")
f.write("original\n")
f.write("fitness")
f.write(str(fitness))
f.write("\n precision")
f.write(str(precision))

log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
repres = ELRepresentation(log)
repres2 = ELRepresentation(log2)
logsimple_set, T_set, sensitives_set = repres.simplify_LKC_without_time_set(sensitive)
frequent_items_set = mfs.frequent_set_miner(T_set, 300/len(T_set))
print("frequent set", frequent_items_set, "\n", len(frequent_items_set))
mvs = MVS(T_set, logsimple_set, sensitive, cont, sensitives_set, count=False, set=True)
violating_set = mvs.mvs(L,K,C)
print("violating set:", violating_set, "\n", len(violating_set))
mvs = MVS(T_set, logsimple_set, sensitive, cont, sensitives_set, count=False, set=True)
violating_set_dev = mvs.mvs(L,K,C,type="dev",contbound=contbound)
print("violating set dev:", violating_set_dev, "\n", len(violating_set_dev))
sup_set = repres.suppression(violating_set, frequent_items_set)
sup_set_dev = repres.suppression(violating_set_dev, frequent_items_set)
T_set = repres.suppressT(logsimple_set, sup_set)
T_set_dev = repres2.suppressT(logsimple_set, sup_set_dev)
log_set = repres.createEventLog(T_set, spectime)
print("set",log_set)
log_set_dev = repres2.createEventLog(T_set_dev, spectime)
print("set dev", log_set_dev)
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
net_set, initial_marking_set, final_marking_set = inductive_miner.apply(log_set)
fitness_set = replay_factory.apply(log, net_set, initial_marking_set, final_marking_set)
precision_set = precision_factory.apply(log, net_set, initial_marking_set, final_marking_set)
print("set", "\n","fitness", fitness_set, "\n","precision", precision_set)
net_set_dev, initial_marking_set_dev, final_marking_set_dev = inductive_miner.apply(log_set_dev)
fitness_set_dev = replay_factory.apply(log, net_set_dev, initial_marking_set_dev, final_marking_set_dev)
precision_set_dev = precision_factory.apply(log, net_set_dev, initial_marking_set_dev, final_marking_set_dev)
print("set and dev", "\n","fitness", fitness_set_dev, "\n","precision", precision_set_dev)
f.write("\n set \n")
f.write("fitness")
f.write(str(fitness_set))
f.write("\n precision")
f.write(str(precision_count))
f.write("\n")
f.write("set and dev \n")
f.write("fitness")
f.write(str(fitness_set_dev))
f.write("\n precision")
f.write(str(precision_set_dev))
f.write("\n")
f.close()

f = open("resultssetcount.txt", "w")
f.write("original\n")
f.write("fitness")
f.write(str(fitness))
f.write("\n precision")
f.write(str(precision))
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
repres = ELRepresentation(log)
repres2 = ELRepresentation(log2)
logsimple_set_count, T_set_count, sensitives_set_count = repres.simplify_LKC_without_time_count_set(sensitive)
frequent_items_count_set = mfs.frequent_set_miner(T_set_count, 300/len(T_set_count))
print("frequent set and count", frequent_items_count_set, "\n", len(frequent_items_count_set))
mvs = MVS(T_set_count, logsimple_set_count, sensitive, cont, sensitives_set_count, True,True)
violating_count_set = mvs.mvs(L,K,C)
print("violating count and set:", violating_count_set, "\n", len(violating_count_set))
mvs = MVS(T_set_count, logsimple_set_count, sensitive, cont, sensitives_set_count, True,True)
violating_count_set_dev = mvs.mvs(L,K,C,type="dev",contbound=contbound)
print("violating count and set dev:", violating_count_set_dev, "\n", len(violating_count_set_dev))
sup_set_count = repres.suppression(violating_count_set, frequent_items_count_set)
sup_set_count_dev = repres.suppression(violating_count_set_dev, frequent_items_count_set)
T_set_count = repres.suppressT(logsimple_set_count, sup_set_count)
T_set_count_dev = repres.suppressT(logsimple_set_count, sup_set_count_dev)
log_set_count = repres.createEventLog(T_set_count, spectime)
print("set count", log_set_count)
log_set_count_dev = repres.createEventLog(T_set_count_dev, spectime)
print("set count dev", log_set_count_dev)
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
net_set_count, initial_marking_set_count, final_marking_set_count = inductive_miner.apply(log_set_count)
fitness_set_count = replay_factory.apply(log, net_set_count, initial_marking_set_count
                                         , final_marking_set_count)
precision_set_count = precision_factory.apply(log, net_set_count, initial_marking_set_count
                                              , final_marking_set_count)
print("set and count", "\n","fitness", fitness_set_count, "\n","precision", precision_set_count)
net_set_count_dev, initial_marking_set_count_dev, final_marking_set_count_dev = inductive_miner.apply(log_set_count_dev)
fitness_set_count_dev = replay_factory.apply(log, net_set_count_dev, initial_marking_set_count_dev
                                             , final_marking_set_count_dev)
precision_set_count_dev = precision_factory.apply(log, net_set_count_dev
                                                  , initial_marking_set_count_dev, final_marking_set_count_dev)
print("set and count dev", "\n","fitness", fitness_set_count_dev, "\n","precision", precision_set_count_dev)
f.write("\n set and count \n")
f.write("fitness")
f.write(str(fitness_set_count))
f.write("\n precision")
f.write(str(precision_set_count))
f.write("\n")
f.write("set and count and dev \n")
f.write("fitness")
f.write(str(fitness_set_count_dev))
f.write("\n precision")
f.write(str(precision_set_count_dev))
f.write("\n")
f.close()

f = open("resultstime.txt", "w")
f.write("original\n")
f.write("fitness")
f.write(str(fitness))
f.write("\n precision")
f.write(str(precision))
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
log2 = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
repres = ELRepresentation(log)
repres2 = ELRepresentation(log2)
logsimple, T, sensitives = repres.simplify_LKC_with_time(sensitive,spectime)
frequent_time = mfs.frequent_seq_activityTime(T, 5)
print("frequent time", frequent_time, "\n", len(frequent_time))
mvs = MVS(T, logsimple, sensitive, cont, sensitives)
violating = mvs.mvs(L,5,C)
print("violating:", violating, "\n", len(violating))
mvs = MVS(T, logsimple, sensitive, cont, sensitives)
violating_dev = mvs.mvs(L,5,C,type="dev",contbound=contbound)
print("violating dev:", violating_dev, "\n", len(violating_dev))
sup_time = repres.suppression(violating, frequent_time)
sup_time_dev = repres.suppression(violating_dev, frequent_time)
T_time = repres.suppressT(logsimple, sup_time)
T_time_dev = repres.suppressT(logsimple, sup_time_dev)
log_time = repres.createEventLog(T_time, spectime)
print("time", log_time)
log_time_dev = repres.createEventLog(T_time_dev, spectime)
print("time dev", log_time_dev)
log = xes_import_factory.apply("Sepsis Cases - Event Log.xes")
net_time, initial_marking_time, final_marking_time = inductive_miner.apply(log_time)
fitness_time = replay_factory.apply(log, net_time, initial_marking_time, final_marking_time)
precision_time = precision_factory.apply(log, net_time, initial_marking_time, final_marking_time)
print("time", "\n","fitness", fitness_time, "\n","precision", precision_time)
net_time_dev, initial_marking_time_dev, final_marking_time_dev = inductive_miner.apply(log_time_dev)
fitness_time_dev = replay_factory.apply(log, net_time_dev, initial_marking_time_dev, final_marking_time_dev)
precision_time_dev = precision_factory.apply(log, net_time_dev, initial_marking_time_dev
                                             , final_marking_time_dev)
print("time dev", "\n","fitness", fitness_time_dev, "\n","precision", precision_time_dev)
f.write("\n time \n")
f.write("fitness")
f.write(str(fitness_time))
f.write("\n precision")
f.write(str(precision_time))
f.write("\n")
f.write("time \n")
f.write("fitness")
f.write(str(fitness_time_dev))
f.write("\n precision")
f.write(str(precision_time_dev))
f.write("\n")


f.close()

#simplify = time.time()
#print("simplify", simplify - start)
#remove counts from tuples!
#T_onlyActivity = T_count.copy()
#mfs.remove_counts(T_onlyActivity)


#mfstime = time.time()
#print("mfs", mfstime-simplify)


#mvstime = time.time()
#print("mvs", mvstime-mfstime)

#suptime = time.time()
#print("Suppresion: ", suptime-mvstime)

#anonymizertime = time.time()
#print("Annonymizer: ", anonymizertime-suptime)

#logtime = time.time()
#print("log", logtime-anonymizertime)
print("Done!!")